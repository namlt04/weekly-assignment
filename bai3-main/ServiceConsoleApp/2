// ConsoleApplication1.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <tchar.h>
#include <Windows.h>
#include <stdio.h>
#include <time.h>
#define SERVICE_NAME _T("myservice")

SERVICE_STATUS g_ServiceStatus = {}; 
SERVICE_STATUS_HANDLE g_StatusHandle = nullptr; 
TCHAR* g_PathLog = _T("D:\\LogServiceBKAV.log"); 
HANDLE g_ServiceStopEvent = INVALID_HANDLE_VALUE;
HANDLE g_WorkerThread = nullptr; 
void WINAPI ServiceHandle(DWORD ctrl)
{
    switch (ctrl)
    {
    case SERVICE_CONTROL_STOP: 
        g_ServiceStatus.dwControlsAccepted = 0; 
        g_ServiceStatus.dwCurrentState = SERVICE_STOP_PENDING;
        SetServiceStatus(g_StatusHandle, &g_ServiceStatus); 
        SetEvent(g_ServiceStopEvent); 
        break; 
    default : 
        break;
    }
}
void WriteLog(const char* message)
{
           FILE* file = NULL;
        if (fopen_s(&file, "C:\\service_log.txt", "a") == 0)
        {
            time_t now = time(NULL);
            struct tm t;
            localtime_s(&t, &now);

            fprintf(file, "[%02d-%02d-%04d %02d:%02d:%02d] %s\n",
                t.tm_mday, t.tm_mon + 1, t.tm_year + 1900,
                t.tm_hour, t.tm_min, t.tm_sec, message);

            fclose(file);
        }
    

}
void WINAPI WorkerThread(PVOID pParam)
{

    while ((WaitForSingleObject(g_ServiceStopEvent, 0)) != WAIT_OBJECT_0)
    {
        WriteLog("Log in: ");
        Sleep(1000); 
    }
}


void WINAPI ServiceMain(DWORD argc, TCHAR* argv[]) // Đọc argv để lấy link log 

{
    if (argc > 1 && argv[1] != nullptr) {
        g_PathLog = argv[1]; // dùng log path từ dòng lệnh
    }
    g_StatusHandle = RegisterServiceCtrlHandler(SERVICE_NAME, ServiceHandle);

    g_ServiceStatus.dwServiceType = SERVICE_WIN32_OWN_PROCESS; 
    g_ServiceStatus.dwControlsAccepted = 0; 
    g_ServiceStatus.dwCurrentState = SERVICE_START_PENDING; 

    SetServiceStatus(g_StatusHandle, &g_ServiceStatus);
    
    g_ServiceStopEvent = CreateEvent(NULL, TRUE, FALSE, NULL); 

    g_ServiceStatus.dwControlsAccepted = SERVICE_ACCEPT_STOP; 
    g_ServiceStatus.dwCurrentState = SERVICE_RUNNING; 


    g_WorkerThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)WorkerThread, NULL, 0 , nullptr); 

    WaitForSingleObject(g_ServiceStopEvent, INFINITE); 

    if (g_WorkerThread)
    {
        WaitForSingleObject(g_WorkerThread, INFINITE); 
        CloseHandle(g_WorkerThread); 
    }
    CloseHandle(g_ServiceStopEvent); 

    g_ServiceStatus.dwControlsAccepted = 0; 
    g_ServiceStatus.dwCurrentState = SERVICE_STOPPED;
    SetServiceStatus(g_StatusHandle, &g_ServiceStatus); 





}
int _tmain(int* argc, TCHAR* argv[])
{
    SERVICE_TABLE_ENTRY ServiceTable[] =
    {
        {(LPWSTR)SERVICE_NAME, (LPSERVICE_MAIN_FUNCTION)ServiceMain },
        {nullptr, nullptr}
    }; 
    StartServiceCtrlDispatcher(ServiceTable);
    return 0;
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
